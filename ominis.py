import asyncio
import logging
import os
import random
import urllib.parse
import subprocess
import httpx
from colorama import Fore, Style, init
from fake_useragent import UserAgent
from bs4 import BeautifulSoup

from src.proxy_handler import scrape_proxies, validate_proxies
from src.tools_handler import fetch_google_results

# Suppress InsecureRequestWarning
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Logging configuration
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init(autoreset=True)  # Initialize colorama for colored output

DEFAULT_NUM_RESULTS = 500
MAX_RETRY_COUNT = 5

counter_emojis = ['üí•', 'üåÄ', 'üí£', 'üî•', 'üí¢', 'üíÄ', '‚ö°', 'üí´', 'üí•', 'üí¢']
emoji = random.choice(counter_emojis)  # Select a random emoji for the counter

query = None

async def run_command(command):
    process = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)

    # Wait for the subprocess to complete.
    stdout, stderr = await process.communicate()

    # Handle output or errors if needed.
    if stdout:
        print(f'[stdout]\n{stdout.decode()}')
    if stderr:
        print(f'[stderr]\n{stderr.decode()}')


async def main():
    clear_screen()
    print(
        f"""{Fore.RED}
    ‚†Ä‚¢∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¶‚†Ä
    ‚¢Ä‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚°Ñ
    ‚£ú‚¢∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°è‚¢£
    ‚°ø‚°Ä‚¢ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚†Ä‚£ø
    ‚£á‚†Å‚†ò‚°å‚¢∑‚£Ä‚£†‚£¥‚£æ‚£ü‚†â‚†â‚†â‚†â‚†â‚†â‚£ª‚£∑‚£¶‚£Ñ‚£Ä‚°¥‚¢´‚†É‚†à‚£∏
    ‚¢ª‚°Ü‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£∂‚¢ù‚¢ª‚£ß‚°Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°ø‚°´‚£∂‚†û‚†õ‚†Å‚†Ä‚†Ä‚£∞‚°ø
    ‚†Ä‚†≥‚°Ä‚†¢‚°Ä‚†Ä‚†Ä‚†∏‚°á‚¢¢‚†π‚°å‚†Ä‚†Ä‚¢â‚†è‚°∞‚¢±‚°è‚†Ä‚†Ä‚¢Ä‚°∞‚¢Ä‚°û‚†Å
    ‚¢Ä‚†ü‚¢¶‚£à‚†≤‚¢å‚£≤‚£ø‚†Ä‚†Ä‚¢±‚†Ä‚†Ä‚†ú‚†Ä‚†Å‚£æ‚¢í‚£°‚†î‚¢â‚°¥‚†ª‚°Ñ‚†Ä
    ‚¢ª‚†Ä‚†Ä‚£à‚£ª‚£û‚°õ‚†õ‚¢§‚°Ä‚†â‚†â‚†â‚†â‚†â‚†â‚£∑‚£Ø‚†è‚†Ä‚†Ä‚†â‚†â‚°è‚¢∏‚°ø‚†Ä
    ‚†à‚°è‚¢∏‚°ú‚£ø‚†ë‚¢§‚°ò‚†≤‚†§‚†§‚£ø‚£ø‚†§‚†§‚†î‚†ã‚°†‚†ä‚£ø‚£É‚°Ü‚¢∏‚†Å‚†Ä
    ‚¢Ä‚°ø‚†ã‚†ô‚†ø‚¢∑‚£§‚£π‚£¶‚£Ä‚£†‚£º‚£ß‚£Ñ‚£Ä‚£†‚£é‚£§‚°æ‚†ø‚†ã‚†ô‚¢∫‚°Ñ‚†Ä
    ‚†ò‚£∑‚†Ä‚†Ä‚¢†‚†Ü‚†à‚¢ô‚°õ‚¢Ø‚£§‚†Ä‚†ê‚£§‚°Ω‚†õ‚†ã‚†Å‚†ê‚°Ñ‚†Ä‚¢Ä‚£æ‚†á‚†Ä
    ‚†Ä‚†ò‚£∑‚£Ä‚°á‚†Ä‚¢Ä‚°Ä‚£à‚°Ü‚¢†‚†Ä‚†Ä‚†Ä‚¢∞‚£á‚°Ä‚†Ä‚†Ä‚¢∏‚£Ä‚£º‚†è‚†Ä‚†Ä
    ‚†Ä‚†Ä‚£∏‚°ø‚£∑‚£û‚†ã‚†â‚¢π‚†Å‚¢à‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚†â‚†ô‚£≤‚£æ‚¢ø‚£á‚†Ä‚†Ä‚†Ä{Fore.YELLOW}~ {Fore.WHITE}Ominis Osint {Fore.YELLOW}- {Fore.RED}[{Fore.WHITE}Secure Web-history Search{Fore.RED}]
    ‚†Ä‚†Ä‚£ø‚°á‚£ø‚£ø‚¢ø‚£Ü‚†à‚†ª‚£Ü‚¢£‚°¥‚¢±‚†ü‚†Å‚£∞‚°∂‚£ø‚£ø‚†ò‚£ø‚†Ä‚†Ä‚†Ä{Fore.RED}---------------------------------------
    ‚†Ä‚†Ä‚†π‚£Ü‚¢à‚°ø‚¢∏‚£ø‚£ª‚†¶‚£º‚£¶‚£¥‚£Ø‚†¥‚£û‚£ø‚°á‚¢ª‚°á‚¢∏‚†è‚†Ä‚†Ä‚†Ä{Fore.YELLOW}~ {Fore.CYAN}Developer{Fore.YELLOW}: {Fore.WHITE} AnonCatalyst {Fore.MAGENTA}<{Fore.RED}
    ‚†Ä‚†Ä‚†Ä‚†à‚†û‚£†‚¢æ‚£ø‚£ø‚£∂‚£ø‚£º‚£ß‚£º‚£∂‚£ø‚£ø‚°∑‚¢å‚¢ª‚°ã‚†Ä‚†Ä‚†Ä {Fore.RED}--------------------------------------- 
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢û‚°õ‚†õ‚¢§‚°Ä‚†â‚†â‚†â‚†â‚†â‚†â‚£∑‚£Ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä{Fore.YELLOW}~ {Fore.CYAN}Github{Fore.YELLOW}:{Fore.BLUE} https://github.com/AnonCatalyst/{Fore.RED}
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚¢¶‚£¨‚†ø‚†ø‚£°‚£§‚†§‚†§‚†î‚†ã‚°†‚†ä‚¢Ä‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä{Fore.RED}--------------------------------------- 
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°à‚¢ø‚£ø‚£ø‚£ø‚£Ω‚°ø‚†Å‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä{Fore.YELLOW}~ {Fore.CYAN}Instagram{Fore.YELLOW}:{Fore.BLUE} https://www.instagram.com/istoleyourbutter/{Fore.RED}
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†≥‚†¶‚†¥‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä"""
    )
    print("\n" + f"{Fore.RED}_" * 80 + "\n")

    proxies = await scrape_proxies()
    if not proxies:
        logger.error(f" {Fore.RED}No proxies scraped. Exiting...{Style.RESET_ALL}")
        return
    else:
        logger.info(
            f" {Fore.RED}[{Fore.GREEN}+{Fore.RED}]{Fore.WHITE} Beginning proxy validation for proxy rotation{Fore.RED}.{Fore.WHITE}\n")

    valid_proxies = await validate_proxies(proxies)
    if not valid_proxies:
        logger.error(f" {Fore.RED}No valid proxies found. Exiting...{Fore.WHITE}")
        return
    else:
        logger.info(f" >| {Fore.GREEN}Proxies validated successfully{Fore.RED}.{Fore.WHITE}\n")

    query = input(f" {Fore.RED}[{Fore.YELLOW}!{Fore.RED}]{Fore.WHITE}  Enter the query to search{Fore.YELLOW}: {Fore.WHITE}")
    await fetch_google_results(query, valid_proxies)
    await asyncio.sleep(3)  # Introduce delay between requests
    await run_command(f"python3 usr.py {query}")


def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')


if __name__ == "__main__":
    asyncio.run(main())


